@include "garrysmod.fgd"

@SolidClass base(Targetname, Parentname) = func_nobuild :
	"A trigger volume that prevents players spawning props within it"
[

]

@PointClass base(Targetname) = sent_spawner :
	"Legacy - The old NPC spawner"
[
	npc(string)
		: "NPCs To Spawn"
		: "npc_combine_s npc_manhack npc_hunter"
		: "Space separated list of NPC types to spawn. A random NPC will be chosen from the list each frame."
	path(string)
		: "NPC Target"
		: "path"
		: "The point_track targetname to direct freshly spawned NPCs at. (eg main player spawn)"
	spawndelay(float)
		: "Spawn Delay"
		:
		: "Override the delay between each NPC spawned"

	input Enable(void) : "Enables the spawner."
	input Disable(void) : "Disables the spawner."
	input SetMaxLiveChildren(integer) : "Sets the maximum number of NPCs that can be alive at any one time from this spawner."
	input SetSpawnFrequency(float) : "Sets how often (in seconds) a new NPC will be spawned."

	output OnSpawnNPC(string) : "Fired when an NPC is spawned. The activator is the NPC, and the string is the name of the NPC."
]

@PointClass base(Targetname) = sent_spawnonce :
	"Legacy - The old NPC spawner (only has one alive at a time)"
[
	npc(string)
		: "NPC To Spawn"
		: "npc_manhack"
		: "NPC Classname to spawn"
	path(string)
		: "NPC Target"
		: "path"
		: "The point_track targetname to direct freshly spawned NPCs at. (eg main player spawn)"
	spawndelay(float)
		: "Spawn Delay"
		:
		: "Override the delay between each NPC spawned"
	copykeys(string)
		: "NPC KeyValues"
		:
		: "Space separated keyvalues to set on the spawned npc ('key1 value1 key2 value2')"
	spawnflags(integer)
		: "NPC Spawnflags"
		: 0
		: "Spawnflags to set on the spawned NPC"
	namecpy(string)
		: "NPC TargetName"
		:
		: "TargetName to give spawned NPC"
	sptime(integer)
		: "TimeLeft Spawn Target"
		:
		: "Don't spawn anything until there is fewer than this many seconds left in the round"

	input Enable(void) : "Enables the spawner."
	input Disable(void) : "Disables the spawner."
	input SetSpawnFrequency(float) : "Sets how often (in seconds) a new NPC will be spawned."

	output OnSpawnNPC(string) : "Fired when an NPC is spawned. The activator is the NPC, and the string is the name of the NPC."
]

@PointClass iconsprite("editor/logic_auto.vmt") = ose_gamerules :
	"The primary map/game interface"
[
	credits(string)
		: "Map Author"
		:
		: "Credits to display in the scoreboard for the map creator (eg 'Disaster Returns 2012')"

	input LoseRound(void) : "If the current round should be immediately lost"
	input WinRound(void) : "If the current round should be immediately lost"

	output OnBuild(integer) : "Fired when the build phase starts, with the round number"
	output OnPrep(integer) : "Fired when the battle preparation phase starts, with the round number"
	output OnBattle(integer) : "Fired when the battle phase starts, with the round number"
	output OnWin(void) : "Fired when a battle phase is won"
	output OnLose(void) : "Fired when a battle phase is lost"
]

@PointClass iconsprite("editor/logic_auto.vmt") = ose_npc_manager :
	"Handles rules for NPC spawning"
[
	disablerelationships(boolean)
		: "Disable Automatic Relationships"
		: 0
		: "If the default AI relationship code should be disabled"

	input NPCSpawned(string) : "Must be called when a fresh NPC is spawned so the game can manage it"
	input PointTemplateSpawned(void) : "It's NPCSpawned, but handles point_template complications"

	output OnNPCLimitChanged(integer) : "Fired with the maxmimum total number of NPCs that can be spawned at once"
	output OnHunterLimitChanged(integer) : "Fired with the maxmimum total number of hunters that can be spawned at once"
	output OnManhackLimitChanged(integer) : "Fired with the maxmimum total number of manhacks that can be spawned at once"
	output OnNPCSpawnFrequencyChanged(float) : "Fired with the minimum delay between spawns"
	output OnNPCSpawnEnabled(void) : "Fired when NPCs should start being spawned"
	output OnNPCSpawnDisabled(void) : "Fired when NPCs should stop being spawned"
]

@PointClass iconsprite("editor/logic_multicompare.vmt") = ose_spawner_helper :
	"Calculates the number of NPCs that should be spawned by the spawners attached to it"
[
	lua(string)
		: "Custom Calculation"
		:
		: "Custom lua calculation eg '(input - 2) / spawners'"

	input NPCLimitChanged(integer) : "Called by the ose_npc_manager"
	output OnNPCLimitChanged(integer) : "Produces the number of NPCs an individual spawner should make"
]

@PointClass iconsprite("editor/logic_auto.vmt") = ose_gametime :
	"Lets the map maker do things based on time"
[
	output OnPhaseStart(integer) : "Fired when a round starts, with the phase time"
	output OnPhaseSecond(integer) : "Fired once a second with the remaining phase time"
]
